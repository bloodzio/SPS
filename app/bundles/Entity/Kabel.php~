<?php
namespace SpsBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Validator\Mapping\ClassMetadata;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Constraints as Assert;

 /**
 * @ORM\Entity(repositoryClass="SpsBundle\Entity\Repository\KabelRepository")
 * @ORM\Table(name="kabel")
 * @ORM\HasLifecycleCallbacks()
 */

class Kabel
{
	
	public function __construct()
	{
		//self::$historiInstance = new Histori($user,'tsdasd');
		$this->histori = new ArrayCollection();
		$this->inverseIdKabel = new ArrayCollection();
	}
	
	public function __toString()
	{
		return $this->producent;
	}
	
	public static function loadValidatorMetadata(ClassMetadata $metadata)
	{
	
		
		$metadata->addPropertyConstraint('id_mufa_start', new Assert\NotBlank(array(
				'message' => 'Uzupełnij pole !'
		)));
		
		$metadata->addPropertyConstraint('id_mufa_end', new Assert\NotBlank(array(
				'message' => 'Uzupełnij pole !'
		)));
		
		$metadata->addPropertyConstraint('id_mufa_end', new Assert\NotEqualTo(array(
				'value' => 'id_mufa_start',
		)));
		
		$metadata->addPropertyConstraint('producent', new Assert\NotBlank(array(
				'message' => 'Uzupełnij pole !'
		)));
		$metadata->addPropertyConstraint('producent', new Assert\Length(array(
				'min'        => 2,
				'max'        => 100,
				'minMessage' => 'Your first name must be at least {{ limit }} characters length',
				'maxMessage' => 'Your first name cannot be longer than {{ limit }} characters length',
		)));
		$metadata->addPropertyConstraint('producent', new Assert\Type(array(
				'type'    => 'string',
				'message' => 'The value {{ value }} is not a valid {{ type }}.',
		)));
		
		
		$metadata->addPropertyConstraint('j', new Assert\NotBlank(array(
				'message' => 'Uzupełnij pole !'
		)));
		$metadata->addPropertyConstraint('j', new Assert\Type(array(
				'type'    => 'integer',
				'message' => 'The value {{ value }} is not a valid {{ type }}.',
		)));
		
		$metadata->addPropertyConstraint('tubs', new Assert\NotBlank(array(
				'message' => 'Uzupełnij pole !'
		)));
		$metadata->addPropertyConstraint('tubs', new Assert\Type(array(
				'type'    => 'integer',
				'message' => 'The value {{ value }} is not a valid {{ type }}.',
		)));
		
		$metadata->addPropertyConstraint('id_standard', new Assert\NotBlank(array(
				'message' => 'Uzupełnij pole !'
		)));
		
		$metadata->addPropertyConstraint('id_kabel_type', new Assert\NotBlank(array(
				'message' => 'Uzupełnij pole !'
		)));
		
		$metadata->addPropertyConstraint('id_object_type', new Assert\NotBlank(array(
				'message' => 'Uzupełnij pole !'
		)));
		
		
	
	}
	
	/**
	 * @ORM\ManyToOne(targetEntity="SpsBundle\Entity\Wezel", inversedBy="id_kabel")
	 * @ORM\JoinColumn(name="id_wezel", referencedColumnName="id", nullable=true)
	 */
	protected $id_wezel=null;
	
	/**
	 * @ORM\ManyToOne(targetEntity="SpsBundle\Entity\Standard", inversedBy="idKabel")
	 * @ORM\JoinColumn(name="id_standard", referencedColumnName="id")
	 */
	protected $id_standard;
	
	/**
	 * @ORM\OneToMany(targetEntity="Wlokno", mappedBy="id_kabel")
	 */
	protected $inverseIdKabel;
	/**
	 * @ORM\OneToMany(targetEntity="Histori", mappedBy="id_kabel")
	 */
	protected $histori;
	
	/**
	 * @ORM\Id
	 * @ORM\Column(type="integer")
	 * @ORM\GeneratedValue(strategy="AUTO")
	 */
	protected $id;
	
		/**
	 * @ORM\ManyToOne(targetEntity="KabelTyp", inversedBy="inverseKabel")
	 * @ORM\JoinColumn(name="id_kabel_type", referencedColumnName="id")
	 */
	protected $id_kabel_type;
	
	/**
	 * @ORM\ManyToOne(targetEntity="ObjectTyp", inversedBy="inverseKabel")
	 * @ORM\JoinColumn(name="id_object_type", referencedColumnName="id")
	 */
	protected $id_object_type;
	
	
	/**
	 * @ORM\ManyToOne(targetEntity="Mufa", inversedBy="inverseMufaStart")
	 * @ORM\JoinColumn(name="id_mufa_start", referencedColumnName="id")
	 */
	protected $id_mufa_start;
	/**
	 * @ORM\ManyToOne(targetEntity="Mufa", inversedBy="inverseMufaEnd")
	 * @ORM\JoinColumn(name="id_mufa_end", referencedColumnName="id")
	 */
	protected $id_mufa_end;
	/**
	 * @ORM\Column(type="string", length=100)
	 */
	protected $producent;
	/**
	 * @ORM\Column(type="integer")
	 */
	protected $j;
	/**
	 * @ORM\Column(type="integer")
	 */
	protected $tubs;
	/**
	 * @ORM\Column(type="integer")
	 */
	protected $lenght;
	
  
}
